# build-linux.yml
# Reusable workflow that builds the Linux and MacOS (x64 and arm64) versions of Libation.
---
name: build-linux

on:
  workflow_call:
    inputs:
      version_override:
        type: string
        description: 'Version number override'
        required: false
      run_unit_tests:
        type: boolean
        description: 'Skip running unit tests'
        required: false
        default: true
      runs_on:
        type: string
        description: 'The GitHub hosted runner to use'
        required: true
      OS:
        type: string
        description: >
          The operating system targeted by the build.
          
          There must be a corresponding Bundle_$OS.sh script file in ./Scripts
        required: true
      architecture:
        type: string
        description: 'CPU architecture targeted by the build.'
        required: true

env:
  DOTNET_CONFIGURATION: 'Release'
  DOTNET_VERSION: '8.0.x'
  RELEASE_NAME: 'chardonnay'

  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: '${{ inputs.OS }}-${{ inputs.architecture }}'
    runs-on: ${{ inputs.runs_on }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        run: |
          inputVersion="${{ inputs.version_override }}"
          if [[ "${#inputVersion}" -gt 0 ]]
          then
            version="${inputVersion}"
          else
            version="$(grep -Eio -m 1 '<Version>.*</Version>' ./Source/AppScaffolding/AppScaffolding.csproj | sed -r 's/<\/?Version>//g')"
          fi
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
          
      - name: Unit test
        if: ${{ inputs.run_unit_tests }}
        working-directory: ./Source
        run: dotnet test

      - name: Publish
        id: publish
        working-directory: ./Source
        run: |          
          if [[ "${{ inputs.OS }}" == "MacOS" ]]
          then
            display_os="macOS"
            RUNTIME_ID="osx-${{ inputs.architecture }}"
          else
            display_os="Linux"
            RUNTIME_ID="linux-${{ inputs.architecture }}"
          fi
          
          OUTPUT="bin/Publish/${display_os}-${{ inputs.architecture }}-${{ env.RELEASE_NAME }}"
          
          echo "display_os=${display_os}" >> $GITHUB_OUTPUT
          echo "Runtime Identifier: $RUNTIME_ID"
          echo "Output Directory: $OUTPUT"
          
          dotnet publish \
              LibationAvalonia/LibationAvalonia.csproj \
              --runtime $RUNTIME_ID \
              --configuration ${{ env.DOTNET_CONFIGURATION }} \
              --output $OUTPUT \
              -p:PublishProfile=LibationAvalonia/Properties/PublishProfiles/${display_os}Profile.pubxml
          dotnet publish \
              LoadByOS/${display_os}ConfigApp/${display_os}ConfigApp.csproj \
              --runtime $RUNTIME_ID \
              --configuration ${{ env.DOTNET_CONFIGURATION }} \
              --output $OUTPUT \
              -p:PublishProfile=LoadByOS/Properties/${display_os}ConfigApp/PublishProfiles/${display_os}Profile.pubxml
          dotnet publish \
              LibationCli/LibationCli.csproj \
              --runtime $RUNTIME_ID \
              --configuration ${{ env.DOTNET_CONFIGURATION }} \
              --output $OUTPUT \
              -p:PublishProfile=LibationCli/Properties/PublishProfiles/${display_os}Profile.pubxml
          dotnet publish \
              HangoverAvalonia/HangoverAvalonia.csproj \
              --runtime $RUNTIME_ID \
              --configuration ${{ env.DOTNET_CONFIGURATION }} \
              --output $OUTPUT \
              -p:PublishProfile=HangoverAvalonia/Properties/PublishProfiles/${display_os}Profile.pubxml

      - name: Build bundle
        id: bundle
        working-directory: ./Source/bin/Publish/${{ steps.publish.outputs.display_os }}-${{ inputs.architecture }}-${{ env.RELEASE_NAME }}
        run: |
          BUNDLE_DIR=$(pwd)
          echo "Bundle dir: ${BUNDLE_DIR}"
          cd ..
          SCRIPT=../../../Scripts/Bundle_${{ inputs.OS }}.sh
          chmod +rx ${SCRIPT}
          ${SCRIPT} "${BUNDLE_DIR}" "${{ steps.get_version.outputs.version }}" "${{ inputs.architecture }}"
          artifact=$(ls ./bundle)
          echo "artifact=${artifact}" >> "${GITHUB_OUTPUT}"
          
      - name: Publish bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.bundle.outputs.artifact }}
          path: ./Source/bin/Publish/bundle/${{ steps.bundle.outputs.artifact }}
          if-no-files-found: error
          retention-days: 7


  containerise:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
